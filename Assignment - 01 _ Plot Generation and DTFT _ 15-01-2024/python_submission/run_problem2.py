# -*- coding: utf-8 -*-
"""run_Problem2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wr2SprKx-bCru2LKUMHrX93guXd6cyk8
"""

import numpy as np
import matplotlib.pyplot as plt
import scipy
import math

# Time specifications

T = [0.001, 0.01, 0.1, 1] # Time Step Sizes

def DTFT(x):

    N = len(x)
    w_resolution = 0.001                                                        # resolution in frequency domain
    w = np.arange(-math.pi,math.pi,w_resolution)                                # omega axis
    n = np.arange(-N//2,N//2,1)                                                 # n array corresponding to indices of signal (Signal Assumed to be symmetric about origin)

    dtft = np.zeros(len(w), dtype='complex')                                    # Array initialized for dtft

    for k,omega in enumerate(w):
        dtft[k] = np.sum(x * np.exp(-1j * omega * n))                           # Calculating value of DTFT for each omega


    return dtft, w

"""### **$x_1(t)$**"""

# 1) x_1(t)

plt.figure(figsize = (20,25))
plot_number = 1
plt.suptitle('Magnitude and Phase Plots of $X_1(\omega)$', weight = 'bold', size = 24)
for time_step in T:
    t = np.arange(-5,5,time_step)
    for sigma_sq in [0.1,1]:

        # Signal
        x_1 = np.exp((-t**2)/(2*sigma_sq))

        # DTFT
        (dtft_x_1, w_axis) = DTFT(x_1)

        # Magnitude Spectrum
        plt.subplot(4,4,plot_number)
        plt.plot(w_axis, np.abs(dtft_x_1))
        plt.title(f'Magnitude Response T : {time_step}  and sigma : {sigma_sq}')
        plt.xlabel('Frequency (in rad/s)')
        plt.ylabel('Magnitude')

        # Phase Spectrum
        plt.subplot(4,4,plot_number+1)
        plt.plot(w_axis, np.angle(dtft_x_1))
        plt.title(f'Phase Response T : {time_step} and sigma: {sigma_sq}')
        plt.xlabel('Frequency (in rad/s)')
        plt.ylabel('Phase (in rads)')

        plot_number= plot_number + 2

plt.show()

"""### **$x_2(t)$**"""

# 2) x_2

plt.figure(figsize =(20,20))
plt.suptitle('Magnitude and Phase Plots of $X_2(\omega)$', weight = 'bold', size = 24)
plot_number = 1;
for time_step in T:
    t = np.arange(-5,5+time_step,time_step)

    # Signal
    x_2 = np.exp(-abs(t))

    #DTFT
    (dtft_x_2, w_axis) = DTFT(x_2)

    # Signal
    plt.subplot(4,3,plot_number)
    plt.stem(t, x_2)
    plt.title(f'$x_2(t)$ T : {time_step}')
    plt.xlabel('Time (in seconds)')
    plt.ylabel('Amplitude')

    # Magnitude Spectrum
    plt.subplot(4,3,plot_number+1)
    plt.plot(w_axis,abs(dtft_x_2))
    plt.title(f'Magnitude Spectrum T : {time_step}')
    plt.xlabel('Frequency (in rad/s)')
    plt.ylabel('Magnitude')

    # Phase Spectrum
    plt.subplot(4,3,plot_number+2)
    plt.plot(w_axis,np.angle(dtft_x_2))
    plt.title(f'Phase Spectrum T : {time_step}')
    plt.xlabel('Frequency (in rad/s)')
    plt.ylabel('Phase')

    plot_number= plot_number + 3
plt.show()

"""### **$x_3(t)$**"""

# 3) x_3(t)

plt.figure(figsize = (20,20))
plot_number = 1
alpha = -0.02
w_0 = 2*math.pi*200
plt.suptitle('Magnitude and Phase Plots of $X_3(\omega)$', weight = 'bold', size = 24)
for time_step in T:
    t = np.arange(-5,5+time_step,time_step)

    # Signal
    x_3 = np.exp(alpha*t)*np.cos(w_0*t)*(t>0)

    #DTFT
    dtft_x_3, w_axis = DTFT(x_3)

    # Signal
    plt.subplot(4,3,plot_number)
    plt.plot(t, x_3)
    plt.title(f'$x_3(t)$ T : {time_step}')
    plt.xlabel('Time (in seconds)')
    plt.ylabel('Amplitude')

    # Magnitude Spectrum
    plt.subplot(4,3,plot_number+1)
    plt.plot(w_axis,abs(dtft_x_3))
    plt.title(f'Magnitude Spectrum T : {time_step}')
    plt.xlabel('Frequency (in rad/s)')
    plt.ylabel('Magnitude')

    # Phase Spectrum
    plt.subplot(4,3,plot_number+2)
    plt.plot(w_axis,np.angle(dtft_x_3))
    plt.title(f'Phase Spectrum T : {time_step}')
    plt.xlabel('Frequency (in rad/s)')
    plt.ylabel('Phase')

    plot_number= plot_number + 3
plt.show()

